#!/bin/bash

# This script is indempotent. You should be able to run it
# multiple times and get to the same end state

#
# Where GIT repos will be cloned and built
#
rm -rf ${HOME}/Dev 1>/dev/null 2>&1
rm -rf /tmp/MLNX*logs

export H=${HOME}/Dev
mkdir -p ${H}/tmp

#
# Make a scratch diretories
#
mkdir -p ${H}/tmp/iso
export T=${H}/tmp

#
# Where the DPDK libraries, headers are installed
# If you change this, also update:
#  $H/reinvent/CMakeLists.txt in two places (-I, -L instructions)
#
export D=${HOME}/local
mkdir -p $D
export LD_LIBRARY_PATH=${D}/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}
export PKG_CONFIG_PATH=${D}/lib/x86_64-linux-gnu/pkgconfig:${PKG_CONFIG_PATH}

#
# Install some of the prereqs
#
apt update
apt install --yes make numactl libnuma-dev rdma-core git ethtool htop libgtest-dev libgcc-10-dev gcc-10-doc cmake cmake-extras python3-pip libverbs-providers ibverbs-utils libibverbs-dev libhugetlbfs0 zlib* ncat unzip zip gdb gdb-doc infiniband-diags libmnl-dev pkgconf* linux-tools-common linux-tools-5.15.0-58-generic libibumad-dev libpci-dev autoconf libtool librdmacm-dev linux-headers-5.15.0-58-generic dkms apt-file
pip3 install --user meson pyelftools ninja gdown
# apt upgrade --yes
# where meson/ninja are installed
export PATH=/root/.local/bin:${PATH}

#
# Get Mellanox deps:
#
# [used]     MFT toolset  comes from: https://network.nvidia.com/products/adapter-software/firmware-tools/
# [used]     OFED dwnload comes from: https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/
#
MFT="mft-4.23.0-104-x86_64-deb.tgz"
MFT_CHECKSUM="13335ebec8e62bc7bdfb7ce55d897765587be8461c027f9f97a868eeaf8c8f56"
MLNX="MLNX_OFED_LINUX-5.9-0.5.6.0-ubuntu22.04-x86_64.tgz"
MLNX_CHECKSUM="67b9fe26769c196fc9c7482d7453c75a0ffe700f17884a0173c4b8acacc04bcc"

# Mellanox/Nvida MLNX_OFED_LINUX driver set cannot be obtained by curl/wget from Nvidia's website.
# Nvidia makes you accept their EUL first so the download process cannot be automated. The original
# URL is https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed. To work around this
# limitation this install script will download a copy from my Google Drive.

cd /tmp
rm -f ./${MLNX}
gdown 1IxgxLkfW727yAm6QyipZfk3fndGAQcwL
ACTUAL_CHECKSUM=`sha256sum ./${MLNX} | cut -d" " -f1`
if [[ "$MLNX_CHECKSUM" != "$ACTUAL_CHECKSUM" ]]
then
  echo "fatal: file: ${MLNX}"
  echo "fatal: actual          checksum: ${ACTUAL_CHECKSUM}"
  echo "fatal: expected NVIDIA checksum: ${MLNX_CHECKSUM}"
  exit 1
fi

cd ${H}/tmp
tar zxf /tmp/MLNX*tgz
cd MLNX*
./mlnxofedinstall --dpdk --force
cd ..

# get MFT tool set
wget https://www.mellanox.com/downloads/MFT/${MFT}
ACTUAL_CHECKSUM=`sha256sum ./${MFT} | cut -d" " -f1`
if [[ "$MFT_CHECKSUM" != "$ACTUAL_CHECKSUM" ]]
then
  echo "fatal: file: ${MFT}"
  echo "fatal: actual          checksum: ${ACTUAL_CHECKSUM}"
  echo "fatal: expected NVIDIA checksum: ${MFT_CHECKSUM}"
  exit 1
fi

tar zxvf ${MFT}
cd ${MFT%%.tgz}
./install.sh --oem

# note unfortunately these paths change depending on the NIC
# mt4119 is Mellanox ConnectX-5; mt4117 is ConnectX-4. cross
# check 'mst status -v' with 'lspci | grep Eth'
mst start
mst status -v
mlxconfig -y -d /dev/mst/mt4119_pciconf0.1 s CQE_COMPRESSION=1
flint --qq -d /dev/mst/mt4119_pciconf0   query
flint --qq -d /dev/mst/mt4119_pciconf0.1 query

#
# Clone repos 
# 
cd $H
rm -rf ./dpdk
git clone https://github.com/DPDK/dpdk.git
rm -rf ./reinvent
git clone https://github.com/gshanemiller/reinvent.git

#
# Build and install DPDK
#
cd $H/dpdk
vi app/meson.build
# note: default build is release. add -Dbuildtype=debug for debug
# note: LTO disabled: significantly increases build time
meson -Db_lto=false -Dplatform=native -Dprefix=${D} build
# note: running too many jobs will exhaust tmp space due to LTO
# note: ninja -j 64 -C build clean removes obj/libs
ninja -j 64 -C build install

#
# Build reinvent
#
cd $H/reinvent
rm -rf build
mkdir build
cd build
cmake -DUNIT_TEST=ON -DINTEGRATION_TEST=ON ..
make -j

#
# Enable IOMMU passthrough
#
echo
echo "you need to enable IOMMU. To do so add a space then 'iommu=1 intel_iommu=on' to the end of the GRUB_CMDLINE_LINUX"
echo "variable in /etc/default/grub. you can optionally isolate cores you don't want the kernel to run on by adding"
echo "a space then 'isolcpus=4-15' which will prevent the kernel from scheduling on cores [4,15]. change cpus to need:"
echo
read -p "Press ENTER to edit /etc/default/grub: "
vi /etc/default/grub
grub-mkconfig > /boot/grub2/grub.cfg

#
# Add variables to ~/.bashrc
#
echo "export H=${HOME}/Dev" >> ${HOME}/.bashrc
echo "export D=${HOME}/local" >> ${HOME}/.bashrc
echo "export PATH=/root/.local/bin:${PATH}" >> ${HOME}/.bashrc
echo "export LD_LIBRARY_PATH=${D}/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu" >> ${HOME}/.bashrc
echo "export PKG_CONFIG_PATH=${D}/lib/x86_64-linux-gnu/pkgconfig" >> ${HOME}/.bashrc
echo "alias ll=\"ls -la\"" >> ${HOME}/.bashrc
echo "alias edit=\"vi\"" >> ${HOME}/.bashrc
echo "alias ppjson=\"python3 -m json.tool\"" >> ${HOME}/.bashrc

#
# Add variables to .vimrc
#
echo "set expandtab" > ~/.vimrc
echo "set tabstop=2" >> ~/.vimrc
echo "set shiftwidth=2" >> ~/.vimrc
echo "set bg=dark" >> ~/.vimrc
echo "set noautoindent" >> ~/.vimrc
echo "set nosmartindent" >> ~/.vimrc
echo "set nocindent" >> ~/.vimrc
echo "set wrap" >> ~/.vimrc
echo ":syntax off" >> ~/.vimrc
echo ":set colorcolumn=120" >> ~/.vimrc

echo
echo "Installation is done except for VLAN/network setup."

# git needs this
git config --global user.email "gshanemiller6@gmail.com"
git config --global user.name "smiller"
git config --global credential.helper store
git config --global credential.helper cache
echo
read -p "Press ENTER to reboot now or CTRL-C to exit: "
reboot
