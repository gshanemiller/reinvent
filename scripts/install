#!/bin/bash

# This script is indempotent. You should be able to run it
# multiple times and get to the same end state

#
# Where GIT repos will be cloned and built
#
rm -rf ${HOME}/Dev 1>/dev/null 2>&1
rm -rf /tmp/MLNX*logs

export H=${HOME}/Dev
mkdir -p ${H}/tmp

#
# Make a scratch diretories
#
mkdir -p ${H}/tmp/iso
export T=${H}/tmp

#
# Where the DPDK libraries, headers are installed
# If you change this, also update:
#  $H/reinvent/CMakeLists.txt in two places (-I, -L instructions)
#
export D=${HOME}/local
mkdir -p $D
export LD_LIBRARY_PATH=${D}/lib/x86_64-linux-gnu:${LD_LIBRARY_PATH}
export PKG_CONFIG_PATH=${D}/lib/x86_64-linux-gnu/pkgconfig:${PKG_CONFIG_PATH}

#
# Install some of the prereqs
#
apt update
apt install --yes make numactl libnuma-dev rdma-core git ethtool htop libgtest-dev libgcc-10-dev gcc-10-doc cmake cmake-extras python3-pip ibverbs-providers ibverbs-utils libibverbs-dev libhugetlbfs0 zlib* ncat unzip zip gdb gdb-doc infiniband-diags pkgconf*
pip3 install --user meson pyelftools ninja
# apt upgrade --yes
# where meson/ninja are installed
export PATH=/root/.local/bin:${PATH}

#
# Get Mellanox deps from non-standard locations
# [not used] The firmware comes from: https://network.nvidia.com/support/firmware/connectx4lxen/
# [used]     MFT toolset  comes from: https://network.nvidia.com/products/adapter-software/firmware-tools/
# [used]     OFED dwnload comes from: https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/
# OFED comes as an ISO file and .tar file. However, the ISO file does not contain 'mlnxofedinstall'
# which is mentioned all over the web. Second, the .tgz not wgettable because the page redirects to a 
# license acceptance page where the URL for the download is not clear. Therefore it'll have to scp'd into
# this machine by hand:
#

# current as of Nov 2022
MLNX="MLNX_OFED_LINUX-5.8-1.0.1.1-ubuntu22.04-x86_64.tgz"
MFT="mft-4.22.0-96-x86_64-deb.tgz"

echo
echo "Mellanox/Nvida MLNX_OFED_LINUX driver set cannot be obtained by curl/wget. You'll need to obtain it by hand"
echo "at https://network.nvidia.com/products/infiniband-drivers/linux/mlnx_ofed/ after accepting the EUA. Then scp it"
echo "into this machine into the /tmp directory:"
echo
echo "example command: scp -i <ssh-key/pem-file> ${MLNX} root@<ip-address>:/tmp"
echo
read -p "scp .tgz file in by hand to /tmp then press ENTER: "
cd ${H}/tmp
tar zxf /tmp/MLNX*tgz
cd MLNX*
./mlnxofedinstall --without-fw-update --dpdk
cd ..
wget https://www.mellanox.com/downloads/MFT/${MFT}
tar zxvf ${MFT}
cd ${MFT%%.tgz}
./install.sh --oem
mst start
mst status -v

#
# Clone repos 
# 
cd $H
rm -rf ./dpdk
git clone git://dpdk.org/dpdk
rm -rf ./reinvent
git clone https://github.com/rodgarrison/reinvent.git

#
# Build and install DPDK
#
cd $H/dpdk
vi app/meson.build
meson -Db_lto=true -Dplatform=native -Dprefix=${D} build
# Note: running too many jobs will exhaust tmp space due to LTO
ninja -j 16 -C build install

#
# Build reinvent
#
cd $H/reinvent
git checkout ubuntu
rm -rf build
mkdir build
cd build
cmake -DUNIT_TEST=ON -DINTEGRATION_TEST=ON -DPERFORMANCE_TEST=ON ..
make -j 16

#
# Enable IOMMU passthrough
#
echo
echo "you need to enable IOMMU. To do so add a space then 'iommu=1 intel_iommu=on' to the end of the GRUB_CMDLINE_LINUX"
echo "variable in /etc/default/grub."
echo
read -p "Press ENTER to edit /etc/default/grub: "
vi /etc/default/grub
grub-mkconfig > /boot/grub2/grub.cfg

#
# Add variables to ~/.bashrc
#
echo "export H=${HOME}/Dev" >> ${HOME}/.bashrc
echo "export D=${HOME}/local" >> ${HOME}/.bashrc
echo "export PATH=/root/.local/bin:${PATH}" >> ${HOME}/.bashrc
echo "export LD_LIBRARY_PATH=${D}/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu" >> ${HOME}/.bashrc
echo "export PKG_CONFIG_PATH=${D}/lib/x86_64-linux-gnu/pkgconfig" >> ${HOME}/.bashrc
echo "alias ll=\"ls -la\"" >> ${HOME}/.bashrc
echo "alias edit=\"vi\"" >> ${HOME}/.bashrc
echo "alias initbld=\"cmake -DUNIT_TEST=ON -DINTEGRATION_TEST=ON -DPERFORMANCE_TEST=ON ..\"" >> ${HOME}/.bashrc

#
# Add variables to .vimrc
#
echo "set expandtab" > ~/.vimrc
echo "set tabstop=2" >> ~/.vimrc
echo "set shiftwidth=2" >> ~/.vimrc
echo "set bg=dark" >> ~/.vimrc
echo "set noautoindent" >> ~/.vimrc
echo "set nosmartindent" >> ~/.vimrc
echo "set nocindent" >> ~/.vimrc
echo "set wrap" >> ~/.vimrc
echo ":syntax off" >> ~/.vimrc
echo ":set colorcolumn=120" >> ~/.vimrc

echo
echo "Installation is done except for VLAN/network setup."

echo
read -p "You need to reboot your machine. Press ENTER to reboot or CTRL-C to exit: "
reboot
