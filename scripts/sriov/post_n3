#!/bin/bash

VFS=4
DEV="ens6f3"
IPV4="10.77.46."
LINKS1="ens6f3v0 ens6f3v1 ens6f3v2 ens6f3v3"
LINKS2=""

declare -i i
declare -i j

function status {
  echo
  echo
  echo "$1"
  echo "==============================================================="
  ip link show
  echo
  echo
}

function cleantc {
  tc filter del dev $1 ingress   parent fff0:
  tc filter del dev $1 root      parent fff1:
  tc qdisc  del dev $1 ingress   handle fff0:
  tc qdisc  del dev $1 root      handle fff1:
}

function dumptc {
  tc filter show dev $1
  tc qdisc  show dev $1
  tc class  show dev $1
}

function mirrorHelper {
  # ingress
  tc qdisc  add     dev $1 handle ffff: ingress
  tc filter add     dev $1 handle parent ffff:fff1 protocol all matchall action mirred egress mirror dev $2
  # egress
  tc qdisc  add     dev $1 handle fff1: root prio
  tc filter add     dev $1 parent fff1: protocol all matchall action mirred egress mirror dev $2
}

function tcmirror {
  cleantc $1
  cleantc $2
  mirrorHelper $1 $2
  dumptc $1
}

function setupvfHelper {
  ip link set $DEV vf 0 mac 0e:8a:a3:32:d1:00
  ip link set $DEV vf 1 mac 0e:8a:a3:32:d1:01
  ip link set $DEV vf 2 mac 0e:8a:a3:32:d1:02
  ip link set $DEV vf 3 mac 0e:8a:a3:32:d1:03

  ip link set $DEV vf 0 vlan 150
  ip link set $DEV vf 1 vlan 151
  ip link set $DEV vf 2 vlan 152
  ip link set $DEV vf 3 vlan 153

  ip link set $DEV vf 0 trust on
  ip link set $DEV vf 1 trust on
  ip link set $DEV vf 2 trust on
  ip link set $DEV vf 3 trust on

  ip link set $DEV vf 0 spoofchk on
  ip link set $DEV vf 1 spoofchk on
  ip link set $DEV vf 2 spoofchk on
  ip link set $DEV vf 3 spoofchk on

  ip link set $DEV vf 0 state enable
  ip link set $DEV vf 1 state enable
  ip link set $DEV vf 2 state enable
  ip link set $DEV vf 3 state enable
}

function setupvf_no_switchdev {
  status "ON-BOOT"
  # turn all then on SR-IOV stuff off
  echo 0 > /sys/class/net/$DEV/device/sriov_numvfs
  echo $VFS > /sys/class/net/$DEV/device/sriov_numvfs

  echo waiting 20 secs for VF links to be added ...
  sleep 20
  echo
  status "POST-CREATE-VFS"

  setupvfHelper
  status "POST-CONFIGURE-VFS"
}

function setupvf {
  # turn all SR-IOV stuff off
  echo 0 > /sys/class/net/$DEV/device/sriov_numvfs
  devlink dev eswitch set pci/0000:01:00.1 mode legacy
  status "ON-BOOT"

  echo $VFS > /sys/class/net/$DEV/device/sriov_numvfs
  status "POST-CREATE-VFS"

  setupvfHelper
  status "POST-CONFIGURE-VFS"

  echo 0000:01:01.2 > /sys/bus/pci/drivers/mlx5_core/unbind
  echo 0000:01:01.3 > /sys/bus/pci/drivers/mlx5_core/unbind
  echo 0000:01:01.4 > /sys/bus/pci/drivers/mlx5_core/unbind
  echo 0000:01:01.5 > /sys/bus/pci/drivers/mlx5_core/unbind

  # the next line doesn't seem to help or hurt
  devlink dev param   set pci/0000:01:00.1 name flow_steering_mode value "smfs" cmode runtime
  # change to switchdev mode; required for SR-IOV
  devlink dev eswitch set pci/0000:01:00.1 mode switchdev

  echo 0000:01:01.2 > /sys/bus/pci/drivers/mlx5_core/bind
  echo 0000:01:01.3 > /sys/bus/pci/drivers/mlx5_core/bind
  echo 0000:01:01.4 > /sys/bus/pci/drivers/mlx5_core/bind
  echo 0000:01:01.5 > /sys/bus/pci/drivers/mlx5_core/bind

  status "POST-SWITCHDEV"
}

function bringup {
  ip link set $DEV up
  for link in $LINKS1
  do
    ip link set $link up
  done
  for link in $LINKS2
  do
    ip link set $link up
  done
}

function configipv4 {
  i=13
  for link in $LINKS1
  do
    ip addr add ${IPV4}$i/255.255.255.0 brd + dev $link
    i=$i+1
  done

  i=5
  for link in $LINKS2
  do
    ip addr add ${IPV4}$i/255.255.255.0 brd + dev $link
    i=$i+1
  done

  status "POST-IP-CONFIG"
}

function enableTcOffload {
  ethtool -K $DEV hw-tc-offload $1
  for link in $LINKS1
  do
    ethtool -K $link hw-tc-offload $1
  done

  for link in $LINKS2
  do
    ethtool -K $link hw-tc-offload $1
  done
}

ip link set $DEV up
setupvf_no_switchdev
bringup
configipv4
enableTcOffload off
bringup
tcmirror ens6f3v0 ens6f3v3
