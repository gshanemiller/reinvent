#!/bin/bash

DEV1="ens6f3"
DEV1_PCI="0000:8a:00.3"

VFS=4
VFS_PRS="ens6f3r0 ens6f3r1 ens6f3r2 ens6f3r3"
VFS_IPS="192.168.0.100 192.168.0.101 192.168.0.102 192.168.0.103"
VFS_LNK="ens6f3v0 ens6f3v1 ens6f3v2 ens6f3v3"
VFS_MAC="80:37:57:17:44:01 80:37:57:17:44:02 80:37:57:17:44:03 80:37:57:17:44:04"

function status {
  echo
  echo
  echo "$1"
  echo "==============================================================="
  lshw -c network -businfo
  echo
  echo
}

function cleantc {
  tc filter del dev $1 ingress
  tc filter del dev $1 root
  tc qdisc  del dev $1 ingress
  tc qdisc  del dev $1 root
}

function dumptc {
  tc qdisc  show dev $1
  tc class  show dev $1
  tc filter show dev $1
}

function tcmirror {
  # ingress
  tc qdisc  add     dev $1 handle ffff: ingress
  tc filter add     dev $1 handle parent ffff:fff1 protocol all matchall action mirred egress mirror dev $2
  # egress
  tc qdisc  add     dev $1 handle fff1: root prio
  tc filter add     dev $1 parent fff1: protocol all matchall action mirred egress mirror dev $2
}

function disable_sriov {
  DEV=$1
  PCI=$2

  echo "awaiting net device destruction ..."
  echo 0 > /sys/class/net/$DEV/device/sriov_numvfs
  devlink dev eswitch set pci/$PCI mode legacy

  sleep 5 
}

function enable_sriov {
  DEV=$1
  PCI=$2
  MAX=$3
  MAC="$4"
  IPS="$5"
  LNK="$6"
  PRS="$7"

  devlink dev eswitch set pci/$PCI mode switchdev
  echo $MAX > /sys/class/net/$DEV/device/sriov_numvfs
  echo "awaiting net device creation ..."
  sleep 30

  declare -i i
  declare -i j

  i=0
  for mac in $MAC
  do
    ip link set $DEV vf $i mac $mac
    i=i+1
  done

  for pr in $PRS
  do
    ip link set $pr up
  done
  ip link set $DEV up

  i=0
  for ip in $IPS
  do
    j=0
    for lnk in $LNK
    do
      if [[ "$i" == "$j" ]]
      then
        ip link set $lnk up
        ip addr add ${ip}/24 dev $lnk
      fi
      j=j+1
    done
    i=i+1
  done

}

function enable_tc_offload {
  DEV=$1
  LNK="$2"
  PRS="$3"

  # theoretically $DEV must first be enabled (but I'm not sure)
  echo hw-tc-offload $DEV ...
  ethtool -K $DEV hw-tc-offload on

  # theoretically this should work (but ethtool reports error)
  for pr in $PRS
  do
    echo hw-tc-offload $pr ...
    ethtool -K $pr hw-tc-offload on
  done

  # theoretically this should not work (but ethtool reports OK)
  for ln in $LNK
  do
    echo hw-tc-offload $ln ...
    ethtool -K $ln hw-tc-offload on
  done
}

function tc_mirror_ingress_vf {
  DEV=$1
  MAX=$2
  PRS="$3"
  MAC="$4"
  DST=""

  set -x

  declare -i i
  declare -i j
  i=1
  j=1

  tc qdisc add dev $DEV ingress
  tc qdisc add dev ens6f3v0 ingress
  tc qdisc add dev ens6f3v1 ingress
  tc qdisc add dev ens6f3v2 ingress
  tc filter add dev ens6f3v0 ingress protocol ip flower verbose skip_sw src_mac 80:37:57:17:44:01 dst_mac ff:ff:ff:ff:ff:ff verbose action mirred egress redirect dev ens6f3v3
  tc filter add dev ens6f3v1 ingress protocol ip flower verbose skip_sw src_mac 80:37:57:17:44:02 dst_mac ff:ff:ff:ff:ff:ff verbose action mirred egress redirect dev ens6f3v3
  tc filter add dev ens6f3v2 ingress protocol ip flower verbose skip_sw src_mac 80:37:57:17:44:03 dst_mac ff:ff:ff:ff:ff:ff verbose action mirred egress redirect dev ens6f3v3

  set +x
}

function tc_mirror_ingress_pf {
  DEV=$1
  MAX=$2
  PRS="$3"
  MAC="$4"
  DST=""

  set -x

  declare -i i
  declare -i j
  i=1
  j=1

  tc qdisc add dev $DEV ingress
  tc qdisc add dev ens6f3r0 ingress
  tc qdisc add dev ens6f3r1 ingress
  tc qdisc add dev ens6f3r2 ingress
  tc filter add dev ens6f3r0 ingress protocol ip flower verbose skip_sw src_mac 80:37:57:17:44:01 dst_mac ff:ff:ff:ff:ff:ff verbose action mirred egress mirror dev ens6f3r3
  tc filter add dev ens6f3r1 ingress protocol ip flower verbose skip_sw src_mac 80:37:57:17:44:02 dst_mac ff:ff:ff:ff:ff:ff verbose action mirred egress mirror dev ens6f3r3
  tc filter add dev ens6f3r2 ingress protocol ip flower verbose skip_sw src_mac 80:37:57:17:44:03 dst_mac ff:ff:ff:ff:ff:ff verbose action mirred egress mirror dev ens6f3r3

  set +x
}

disable_sriov $DEV1 $DEV1_PCI
enable_sriov $DEV1 $DEV1_PCI $VFS "${VFS_MAC}" "${VFS_IPS}" "${VFS_LNK}" "${VFS_PRS}"
status "POST SRIOV ENABLE"
enable_tc_offload $DEV1 "${VFS_LNK}" "${VFS_PRS}"
tc_mirror_ingress_pf $DEV1 $VFS "${VFS_PRS}" "${VFS_MAC}"
# tc_mirror_ingress $DEV1 $VFS "${VFS_LNK}" "${VFS_MAC}"
# status "POST SR-IOV-ENABLE"
